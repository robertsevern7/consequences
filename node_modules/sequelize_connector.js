var Sequelize = require("sequelize");

var sequelize = new Sequelize('Consequences', 'root', 'password',{});

var User = sequelize.define('User', {
    id: {primaryKey: true, type: Sequelize.INTEGER, autoIncrement: true},
    userId: {type: Sequelize.STRING},
    carrier: {type: Sequelize.STRING},
    email: {type: Sequelize.STRING}
});

var Tale = sequelize.define('Tale', {
    id: {type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true},
	parentId: {type: Sequelize.INTEGER, allowNull: true},
    title: {type: Sequelize.STRING, allowNull: false},
    seedInfo: {type: Sequelize.STRING},
    max_sections: {type: Sequelize.INTEGER, allowNull: false, defaultValue: 5},
    num_likes: {type: Sequelize.INTEGER, allowNull: false, defaultValue: 0},
    completed: {type: Sequelize.BOOLEAN, defaultValue: false},
    user_id_lock: {type: Sequelize.INTEGER, allowNull: true}, // foreign key constraint
    locktime: {type: Sequelize.DATE, defaultValue: Sequelize.NOW}
});

var Section = sequelize.define('Section', {
    id: {type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true},
	content: {type: Sequelize.STRING, allowNull: false}
});

var Name = sequelize.define('Name', {
    value: {type: Sequelize.STRING}
}, {
    timestamps: false
});

var Location = sequelize.define('Location', {
    value: {type: Sequelize.STRING}
}, {
    timestamps: false
});

Tale.belongsTo(User);
Tale.hasOne(Tale, {foreignKey: 'parentId'})
Section.belongsTo(Tale);
Section.belongsTo(User);

sequelize.sync();

function populateNames() {
    Name.count().success(function(c) {
        if (c) {
            return;
        }
        
        var names = [
            'James','John','Robert','Michael','William','David','Richard','Charles','Joseph','Thomas','Christopher','Daniel','Paul','Mark','Donald','George','Kenneth','Steven','Edward','Brian','Ronald','Anthony','Kevin','Jason','Matthew','Gary','Timothy','Jose','Larry','Jeffrey','Frank','Scott','Eric','Stephen','Andrew','Raymond','Gregory','Joshua','Jerry','Dennis','Walter','Patrick','Peter','Harold','Douglas','Henry','Carl','Arthur','Ryan','Roger','Joe','Juan','Jack','Albert','Jonathan','Justin','Terry','Gerald','Keith',
            'Samuel','Willie','Ralph','Lawrence','Nicholas','Roy','Benjamin','Bruce','Brandon','Adam','Harry','Fred','Wayne','Billy','Steve','Louis','Jeremy','Aaron','Randy','Howard','Eugene','Carlos','Russell','Bobby','Victor','Martin','Ernest','Phillip','Todd','Jesse','Craig','Alan','Shawn','Clarence','Sean','Philip','Chris','Johnny','Earl','Jimmy','Antonio','Danny','Bryan','Tony','Luis','Mike','Stanley','Leonard','Nathan','Dale','Manuel','Rodney','Curtis','Norman','Allen','Marvin','Vincent','Glenn','Jeffery','Travis','Jeff','Chad','Jacob','Lee','Melvin','Alfred','Kyle','Francis','Bradley','Jesus','Herbert','Frederick','Ray',
            'Joel','Edwin','Don','Eddie','Ricky','Troy','Randall','Barry','Alexander','Bernard','Mario','Leroy','Francisco','Marcus','Micheal','Theodore','Clifford','Miguel','Oscar','Jay','Jim','Tom','Calvin','Alex','Jon','Ronnie','Bill','Lloyd','Tommy','Leon','Derek','Warren','Darrell','Jerome','Floyd','Leo','Alvin','Tim','Wesley','Gordon','Dean','Greg','Jorge','Dustin','Pedro','Derrick','Dan','Lewis','Zachary','Corey','Herman','Maurice','Vernon','Roberto','Clyde','Glen','Hector','Shane','Ricardo','Sam','Rick','Lester','Brent','Ramon','Charlie','Tyler','Gilbert','Gene','Marc','Reginald','Ruben','Brett','Angel','Nathaniel','Rafael',
            'Leslie','Edgar','Milton','Raul','Ben','Chester','Cecil','Duane','Franklin','Andre','Elmer','Brad','Gabriel','Ron','Mitchell','Roland','Arnold','Harvey','Jared','Adrian','Karl','Cory','Claude','Erik','Darryl','Jamie','Neil','Jessie','Christian','Javier','Fernando','Clinton','Ted','Mathew','Tyrone','Darren','Lonnie','Lance','Cody','Julio','Kelly','Kurt','Allan','Nelson','Guy','Clayton','Hugh','Max','Dwayne','Dwight','Armando','Felix','Jimmie','Everett','Jordan','Ian','Wallace','Ken','Bob','Jaime','Casey','Alfredo','Alberto','Dave','Ivan','Johnnie','Sidney','Byron','Julian','Isaac','Morris','Clifton','Willard','Daryl','Ross','Virgil','Andy','Marshall','Salvador','Perry','Kirk','Sergio','Marion','Tracy','Seth','Kent','Terrance',
            'Rene','Eduardo','Terrence','Enrique','Freddie','Wade','Mary','Patricia','Linda','Barbara','Elizabeth','Jennifer','Maria','Susan','Margaret','Dorothy','Lisa','Nancy','Karen','Betty','Helen','Sandra','Donna','Carol','Ruth','Sharon','Michelle','Laura','Sarah','Kimberly','Deborah','Jessica','Shirley','Cynthia','Angela','Melissa','Brenda','Amy','Anna','Rebecca','Virginia','Kathleen','Pamela','Martha','Debra','Amanda','Stephanie','Carolyn','Christine','Marie','Janet','Catherine','Frances','Ann','Joyce','Diane','Alice','Julie','Heather','Teresa','Doris','Gloria','Evelyn','Jean','Cheryl','Mildred','Katherine','Joan','Ashley','Judith','Rose','Janice','Kelly','Nicole','Judy','Christina','Kathy','Theresa','Beverly','Denise','Tammy','Irene','Jane','Lori','Rachel','Marilyn','Andrea','Kathryn','Louise','Sara','Anne','Jacqueline','Wanda','Bonnie','Julia','Ruby','Lois','Tina','Phyllis','Norma','Paula','Diana','Annie','Lillian',
            'Emily','Robin','Peggy','Crystal','Gladys','Rita','Dawn','Connie','Florence','Tracy','Edna','Tiffany','Carmen','Rosa','Cindy','Grace','Wendy','Victoria','Edith','Kim','Sherry','Sylvia','Josephine','Thelma','Shannon','Sheila','Ethel','Ellen','Elaine','Marjorie','Carrie','Charlotte','Monica','Esther','Pauline','Emma','Juanita','Anita','Rhonda','Hazel','Amber','Eva','Debbie','April','Leslie','Clara','Lucille','Jamie','Joanne','Eleanor','Valerie','Danielle','Megan','Alicia','Suzanne','Michele','Gail','Bertha','Darlene','Veronica','Jill','Erin','Geraldine','Lauren','Cathy','Joann','Lorraine','Lynn','Sally','Regina','Erica','Beatrice','Dolores','Bernice','Audrey','Yvonne','Annette','June','Samantha','Marion','Dana','Stacy','Ana','Renee','Ida','Vivian','Roberta','Holly','Brittany','Melanie','Loretta','Yolanda','Jeanette','Laurie','Katie','Kristen','Vanessa','Alma','Sue','Elsie','Beth','Jeanne','Vicki','Carla','Tara','Rosemary',
            'Eileen','Terri','Gertrude','Lucy','Tonya','Ella','Stacey','Wilma','Gina','Kristin','Jessie','Natalie','Agnes','Vera','Willie','Charlene','Bessie','Delores','Melinda','Pearl','Arlene','Maureen','Colleen','Allison','Tamara','Joy','Georgia','Constance','Lillie','Claudia','Jackie','Marcia','Tanya','Nellie','Minnie','Marlene','Heidi','Glenda','Lydia','Viola','Courtney','Marian','Stella','Caroline','Dora','Jo','Vickie','Mattie','Terry','Maxine','Irma','Mabel','Marsha','Myrtle','Lena','Christy','Deanna','Patsy','Hilda','Gwendolyn','Jennie','Nora','Margie','Nina','Cassandra','Leah','Penny','Kay','Priscilla','Naomi','Carole','Brandy','Olga','Billie','Dianne','Tracey','Leona','Jenny','Felicia','Sonia','Miriam','Velma','Becky','Bobbie','Violet','Kristina','Toni','Misty','Mae','Shelly','Daisy','Ramona','Sherri','Erika','Katrina','Claire'
        ];
       
        for (var i = 0, len = names.length; i < len; ++i) {
            Name.create({
                value: names[i]
            });
        }
    })
}

function populateLocations() {
    Location.count().success(function(c) {
        if (c) {
            return;
        }
        
        var locations = [
            'Afghanistan','Africa','Airplane','Airport','Airship','Algeria','Alley','Ambulance','America','Angora','Antarctica','Argentina','Armchair','Asia','Australia','Avenue','Bakery','Bangladesh','Bank','Basement','Bath','Bathroom','Bathtub','Beach','Bed','Bedroom','Biplane','Bookcase','Bowling','Brazil','Bridge','Bulldozer','Bus','Bush','Cabinet','Cafe','Canada','Car','Caravan','Carriage','Cart','Cathedral',
            'Cave','Cemetery','Cinema','City','Coach','Coast','College','Colombia','Congo','Creek','Cupboard','Dentist','Drawbridge','Drawer','Dungeon','Egypt','Entrance','Ethiopia','Europe','Factory','Farm','Ferry','Fountain','Fridge','Garage','Garden','Germany','Harbor','Helicopter','Holiday','Home','Hospital','Hovercraft','Hurricane','India','Indonesia','Iran','Iraq','Island','Israel','Italian','Italy','Kitchen','Lunchroom','Motorboat','Motorcycle','Mountain','North','Office','Opera','Ostrich','Prison',
            'Quicksand','Restaurant','River','Road','Sailboat','Seaplane','Seashore','Sphynx','Stage','Staircase','Star','Street','Submarine','Subway','Supermarket','Tank','Tanker','Taxi','Tea','Tornado','Traffic','Train','Tsunami','Tugboat','Typhoon','Valley','Vault','Volcano','Waterfall','Wilderness','Workshop','Yacht','Yard','Zoo'
        ];
       
        for (var i = 0, len = locations.length; i < len; ++i) {
            Location.create({
                value: locations[i]
            });
        }
    })
}

populateNames();
populateLocations();

module.exports.createUser = function(userId, email, carrier, successHandler, failureHandler) {
    User.find({
        where: {userId: userId, carrier: carrier}
    }).success(function(user) {
        if (user) {
            console.log('User ' + userId + ' already exists')
            successHandler && successHandler(user);
        } else {
            console.log('user  ' + userId + ' does not exist, creating');
            User.build({ 
                userId: userId, 
                carrier: carrier,
                email: email
            }).save().success(function(user) {
                console.log('created User ' + userId);
                successHandler && successHandler(user);
            }).error(function(err) {
                console.log('failed to create user ' + userId);
                console.dir(err);
                failureHandler && failureHandler();
            });
        }
    }).error(function(e) {
        console.log('Failed to find the user ' + userId)
        console.dir(e);
        failureHandler && failureHandler();
    })
}

module.exports.getSectionCount = function(storyId, successHandler, failureHandler) {
    Section.count({where: {TaleId: storyId}}).success(function(count) {
        console.log('Found ' + count + ' sections for story ' + storyId); 
        successHandler && successHandler(count);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.getStory = function(storyId, successHandler, failureHandler) {
    Tale.find(storyId - 0).success(function(story) {
        successHandler && successHandler(story);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.getFullStory = function(storyId, successHandler, failureHandler) {
    Tale.find({where: {id: storyId}}).success(function(story) {
        console.log('Retrieved story ' + storyId);
        if (story) {
            story.getUser().success(function(user) {
                story.user = user;
                Section.findAll({
                    where: {TaleId: story.id}, 
                    order: 'id ASC',
                    attributes: ['content', 'UserId']
                }).success(function(sections) {                    
                    createSectionsOutput(story, sections, successHandler);                                        
                }).error(function(err) {
                    console.log('Failed to get sections of story ' + storyId)
                    console.dir(e);
                    failureHandler && failureHandler();
                })                
            }).error(function(err) {
                console.log('Failed to get owner of story ' + storyId)
                console.dir(e);
                failureHandler && failureHandler();
            });
        } else {
            console.log('Could not find story ' + storyId);
            failureHandler && failureHandler();
        }
    }).error(function(err) {
        console.log('Failed to find the story ' + storyId)
        console.dir(e);
        failureHandler && failureHandler();
    });
}

var createSectionsOutput = function(story, sections, successHandler, failureHandler) {
    var outputSections = [];
    var userIds = [];
    for (var i =0, len = sections.length; i < len; ++i) { 
        var section = sections[i];
        userIds.push(section.UserId);
    }
    
    User.findAll({
        where: {id : userIds},
        attributes: ['id','UserId','email']
    }).success(function(users) {        
        var usersMap = {};
        for (var j = 0, len = users.length; j < len; ++j) {
            var user = users[j];
            usersMap[user.id] = user;
        }

        for (var k = 0, len = sections.length; k < len; ++k) {
            var section = sections[k];
            outputSections.push({
                content: section.content,
                contributor: usersMap[section.UserId].UserId,
                contributorAddress: usersMap[section.UserId].email
            });
        }
        
        story.sections = outputSections;
        successHandler && successHandler(story);
    }).error(function(err) {
        console.log('Failed to find the users for the sections' + story.id)
        console.dir(e);
        failureHandler && failureHandler();
    });
}

module.exports.hasContributed = function(storyId, userId, successHandler, failureHandler) {
    Section.find({
        where: {
            UserId: userId,
            TaleId: storyId
        }
    }).success(function(section) {
        successHandler(!!section);
    }).error(failureHandler);
}

module.exports.getUser = function(userId, successHandler, failureHandler) {
    User.find((userId - 0)).success(successHandler).error(failureHandler);
}

module.exports.getFriends = function(friendIds, successHandler, failureHandler) {
    User.findAll({
        where: {
            userId: friendIds
        }
    }).success(function(users) {
        successHandler && successHandler(users);
    }).error(function() {
        failureHandler && failureHandler();
    })
}

module.exports.getUserStoryCount = function(userId, successHandler, failureHandler) {
    if (!checkNumber(userId)) {
        failureHandler && failureHandler();
        return;
    }
    var sql = "SELECT COUNT(*) FROM sections WHERE UserId=" + userId + ' GROUP BY UserId';
    sequelize.query(sql, null, {raw: true}).on('success', function(response) {
        var count = response && response[0] && response[0]['COUNT(*)'] || 0;
        successHandler && successHandler(count);
    }).error(function() {
        failureHandler && failureHandler();
    })
}

module.exports.getAllStoryCount = function(successHandler, failureHandler) {
    Tale.count(). success(function(count) {
        console.log('There are ' + count + ' stories');
        successHandler && successHandler(count)
    }).error(function() {
        failureHandler && failureHandler();
    });
}

var getTaleSortOrder = function(sortOrder) {
    switch(sortOrder) {
        case 'popularity':
            return 'num_likes';
        case 'date':
            return 'createdAt';
        case 'alphabetical':
            return 'title';
    }    
}

function checkNumber(value) {
    return value%1 !== 'NaN';
}

function getUserStories(userId, pageNumber, pageSize, sortOrder, sortDir, successHandler, failureHandler) {
    var offset = (pageNumber - 1) * pageSize;
    if (!(checkNumber(userId) && checkNumber(pageNumber) && checkNumber(pageSize))) {
        failureHandler && failureHandler();
        return;
    }
    
    if (sortDir !== 'ASC' && sortDir !== 'DESC') {
        failureHandler && failureHandler();
        return;
    }
    
    sql = "SELECT t.* FROM tales t INNER JOIN sections s ON t.id = s.TaleId WHERE s.UserId=" + userId + ' ORDER BY ' + getTaleSortOrder(sortOrder) + ' ' + sortDir + ' LIMIT ' + offset + ', ' + pageSize;
    sequelize.query(sql, Tale).on('success', function(stories) {
        processStories(stories, userId, successHandler, failureHandler);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

function processStories(stories, userId, successHandler, failureHandler) {
    stories = stories || [];
    var storyIds = [];
    var userIds = [];
    var storiesMap = {};
    for (var i = 0, len = stories.length; i < len; ++i) {           
        var story = stories[i];       
        userIds.push(story.UserId);
        story.sections = [{content: ''}];            
        story.numlikes = story.num_likes;
        console.log('adding ' + story.id)
        storyIds.push(story.id);    
        storiesMap[story.id] = story;
    }
        
    if (!stories.length) {
        successHandler && successHandler(stories);
    }
    //Why the hell can't I do group by and min?!?
    Section.findAll({
        attributes: ['TaleId', 'id', 'content'],
        where: {
            TaleId: storyIds
        },
        order: 'TaleId, id'
    }).success(function(sections) {
        var storyId = -1;
        for (var j = 0, len = sections.length; j < len; ++j) {
            var section = sections[j];
            if (section.TaleId !== storyId) {
                storyId = section.TaleId;
                storiesMap[storyId].sections[0].content = section.content;
            }
        }
        
        if (!userId) {
            addUsersIdsToStories(userIds, stories, successHandler, failureHandler);
        } else {
            successHandler && successHandler(stories);
        }
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.getTopStory = function(successHandler, failureHandler) {
    var queryParams = {
        limit: 1,
        order: 'num_likes DESC'
    }
    
    Tale.find(queryParams).success(function(story) {
        successHandler && successHandler(story);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.getStories = function(userId, pageNumber, pageSize, sortOrder, sortDir, successHandler, failureHandler) {
    var queryParams = {
        limit: pageSize,
        order: getTaleSortOrder(sortOrder) + ' ' + sortDir,
        offset: (pageNumber - 1) * pageSize
    }
    
    if (userId) {
        getUserStories(userId, pageNumber, pageSize, sortOrder, sortDir, successHandler, failureHandler);
        return;
    }
    
    Tale.findAll(queryParams).success(function(stories) {
        processStories(stories, userId, successHandler, failureHandler);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

var addUsersIdsToStories = function(userIds, stories, successHandler, failureHandler) {
    User.findAll({where: {id: userIds}}).success(function(users) {
        var usersMap = {};
        for (var k = 0, len = users.length; k < len; ++k) {
            var user = users[k];
            usersMap[user.id] = user;
        }
        
        for (var l = 0, len = stories.length; l < len; ++l) {
            var story = stories[l];
            story.owner = usersMap[story.UserId].userId;
        }
        
        successHandler && successHandler(stories);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.createStory = function(story, user, content, successHandler, failureHandler) {    
    Tale.build(story).save().success(function(savedStory) {
        savedStory.setUser(user).success(function() {
            module.exports.createSection(content, savedStory, user, successHandler, failureHandler);
            console.log('Set User ' + user.userId);
        }).error(function() {
            console.log('failed to add user to story ' + story);
            console.dir(err);
            failureHandler && failureHandler();
        })
        
    }).error(function(err) {
        console.log('failed to create story ' + story);
        console.dir(err);
        failureHandler && failureHandler();
    });
}

module.exports.createSection = function(sectionContent, story, user, successHandler, failureHandler) {
    Section.build({
        content: sectionContent
    }).save().success(function(section) {
        module.exports.unlockStory(story.id, user.id);
        section.setUser(user).success(function() {        
            console.log('Added user ' + user.id + ' to section ' + section.id);
            section.setTale(story).success(function() {
                console.log('Added story ' + story.id + ' to section ' + section.id);
                successHandler && successHandler(story.id);
            }).error(function(err) {
                console.log('failed to add story ' + story.id + ' to story section ' + section.id);
                console.dir(err);
                failureHandler && failureHandler();
            })
        }).error(function(err) {
            console.log('failed to add user ' + user.id + ' to story section ' + section.id);
            console.dir(err);
            failureHandler && failureHandler();
        })
    }).error(function(err) {
        console.log('failed to create story section ' + sectionContent + ', ' + story.id);
        console.dir(err);
        failureHandler && failureHandler();
    })
}

module.exports.lockStory = function(storyId, userId, successHandler, failureHandler) {
    if (storyId%1 === 'NaN' || userId%1 === 'NaN') {
        failureHandler && failureHandler();
    }
    var sql = 'UPDATE tales SET user_id_lock = ' + userId + ', locktime=NOW() WHERE (user_id_lock = ' + userId + ' OR user_id_lock IS NULL OR locktime < NOW() - INTERVAL 20 MINUTE) AND id=' + storyId;
    console.log('Getting story ' + storyId)
    console.log('Locked by user ' + userId)
    sequelize.query(sql).on('success', function(a) {
        Tale.find({
            where: {
                id: storyId
            }
        }).success(function(tale) {
            console.log('locked by ' + tale.user_id_lock)
            console.log('current user ' + userId)
            successHandler && successHandler(tale.user_id_lock === userId, tale.locktime);
        }).error(function() {
            failureHandler && failureHandler();
        })            
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.unlockStory = function(storyId, userId, successHandler, failureHandler) {
    var sql = "UPDATE tales SET user_id_lock=null WHERE id=" + storyId; 
}

module.exports.getRandomNames = function(successHandler, failureHandler) {
    var sql = "SELECT n.* FROM names n ORDER BY RAND() LIMIT 2";
    sequelize.query(sql, Name).on('success', function(names) {
        successHandler(names[0].value, names[1].value);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.getRandomLocation = function(successHandler, failureHandler) {
    sql = "SELECT loc.* FROM locations loc ORDER BY RAND() LIMIT 1";
    sequelize.query(sql, Location).on('success', function(locations) {
        successHandler(locations[0].value);
    }).error(function() {
        failureHandler && failureHandler();
    });
}