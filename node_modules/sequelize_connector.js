var Sequelize = require("sequelize");

var sequelize = new Sequelize('Consequences', 'root', 'password',{});

var User = sequelize.define('User', {
    id: {primaryKey: true, type: Sequelize.INTEGER, autoIncrement: true},
    userId: {type: Sequelize.INTEGER},
    carrier: {type: Sequelize.STRING}
});

var Tale = sequelize.define('Tale', {
    id: {type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true},
    title: {type: Sequelize.STRING, allowNull: false},
    characters: {type: Sequelize.STRING},
    max_sections: {type: Sequelize.INTEGER, allowNull: false, defaultValue: 5},
    num_likes: {type: Sequelize.INTEGER, allowNull: false, defaultValue: 0},
    completed: {type: Sequelize.BOOLEAN, defaulValue: false}
});

var Section = sequelize.define('Section', {
    id: {type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true},
	content: {type: Sequelize.STRING, allowNull: false}
});

Tale.belongsTo(User);
Section.belongsTo(Tale);
Section.belongsTo(User);

sequelize.sync();

module.exports.createUser = function(userId, carrier, successHandler, failureHandler) {
    User.find({
        where: {userId: userId, carrier: carrier}
    }).success(function(user) {
        if (user) {
            console.log('User ' + userId + ' already exists')
            successHandler && successHandler(user);
        } else {
            console.log('user  ' + userId + ' does not exist, creating');
            User.build({ 
                userId: userId, 
                carrier: carrier
            }).save().success(function(user) {
                console.log('created User ' + userId);
                successHandler && successHandler(user);
            }).error(function(err) {
                console.log('failed to create user ' + userId);
                console.dir(err);
                failureHandler && failureHandler();
            });
        }
    }).error(function(e) {
        console.log('Failed to find the user ' + userId)
        console.dir(e);
        failureHandler && failureHandler();
    })
}

module.exports.getSectionCount = function(storyId, successHandler, failureHandler) {
    Section.count({where: {TaleId: storyId}}).success(function(count) {
        console.log('Found ' + count + ' sections for story ' + storyId); 
        successHandler && successHandler(count);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.getStory = function(storyId, successHandler, failureHandler) {
    Tale.find(storyId - 0).success(function(story) {
        successHandler && successHandler(story);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.getFullStory = function(storyId, successHandler, failureHandler) {
    Tale.find({where: {id: storyId}}).success(function(story) {
        console.log('Retrieved story ' + storyId);
        if (story) {
            story.getUser().success(function(user) {
                story.user = user;
                Section.findAll({
                    where: {TaleId: story.id}, 
                    order: 'id ASC',
                    attributes: ['content', 'UserId']
                }).success(function(sections) {                    
                    createSectionsOutput(story, sections, successHandler);                                        
                }).error(function(err) {
                    console.log('Failed to get sections of story ' + storyId)
                    console.dir(e);
                    failureHandler && failureHandler();
                })                
            }).error(function(err) {
                console.log('Failed to get owner of story ' + storyId)
                console.dir(e);
                failureHandler && failureHandler();
            });
        } else {
            console.log('Could not find story ' + storyId);
            failureHandler && failureHandler();
        }
    }).error(function(err) {
        console.log('Failed to find the story ' + storyId)
        console.dir(e);
        failureHandler && failureHandler();
    });
}

var createSectionsOutput = function(story, sections, successHandler, failureHandler) {
    var outputSections = [];
    var userIds = [];
    for (var i =0, len = sections.length; i < len; ++i) { 
        var section = sections[i];
        userIds.push(section.UserId);
    }
    
    User.findAll({
        where: {id : userIds},
        attributes: ['id','UserId']
    }).success(function(users) {
        var usersMap = {};
        for (var j = 0, len = users.length; j < len; ++j) {
            var user = users[j];
            usersMap[user.id] = user.UserId;
        }

        for (var k = 0, len = sections.length; k < len; ++k) {
            var section = sections[k];
            outputSections.push({
                content: section.content,
                contributor: usersMap[section.UserId]
            });
        }
        
        story.sections = outputSections;
        successHandler && successHandler(story);
    }).error(function(err) {
        console.log('Failed to find the users for the sections' + story.id)
        console.dir(e);
        failureHandler && failureHandler();
    });
}

module.exports.hasContributed = function(storyId, userId, successHandler, failureHandler) {
    Section.find({
        where: {
            UserId: userId,
            TaleId: storyId
        }
    }).success(function(section) {
        successHandler(!!section);
    }).error(failureHandler);
}

module.exports.getUser = function(userId, successHandler, failureHandler) {
    User.find((userId - 0)).success(successHandler).error(failureHandler);
}

module.exports.getFriends = function(friendIds, successHandler, failureHandler) {
    User.findAll({
        where: {
            userId: friendIds
        }
    }).success(function(users) {
        successHandler && successHandler(users);
    }).error(function() {
        failureHandler && failureHandler();
    })
}

module.exports.getUserStoryCount = function(userId, successHandler, failureHandler) {
    if (!checkNumber(userId)) {
        failureHandler && failureHandler();
        return;
    }
    var sql = "SELECT COUNT(*) FROM sections WHERE UserId=" + userId + ' GROUP BY UserId';
    sequelize.query(sql, null, {raw: true}).on('success', function(response) {
        var count = response && response[0] && response[0]['COUNT(*)'] || 0;
        successHandler && successHandler(count);
    }).error(function() {
        failureHandler && failureHandler();
    })
}

module.exports.getAllStoryCount = function(successHandler, failureHandler) {
    Tale.count(). success(function(count) {
        console.log('There are ' + count + ' stories');
        successHandler && successHandler(count)
    }).error(function() {
        failureHandler && failureHandler();
    });
}

var getTaleSortOrder = function(sortOrder) {
    switch(sortOrder) {
        case 'popularity':
            return 'num_likes';
        case 'date':
            return 'createdAt';
        case 'alphabetical':
            return 'title';
    }    
}

function checkNumber(value) {
    return value%1 !== 'NaN';
}

function getUserStories(userId, pageNumber, pageSize, sortOrder, sortDir, successHandler, failureHandler) {
    var offset = (pageNumber - 1) * pageSize;
    if (!(checkNumber(userId) && checkNumber(pageNumber) && checkNumber(pageSize))) {
        failureHandler && failureHandler();
        return;
    }
    
    if (sortDir !== 'ASC' && sortDir !== 'DESC') {
        failureHandler && failureHandler();
        return;
    }
    
    sql = "SELECT t.* FROM tales t INNER JOIN sections s ON t.id = s.TaleId WHERE s.UserId=" + userId + ' ORDER BY ' + getTaleSortOrder(sortOrder) + ' ' + sortDir + ' LIMIT ' + offset + ', ' + pageSize;
    sequelize.query(sql, Tale).on('success', function(stories) {
        processStories(stories, userId, successHandler, failureHandler);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

function processStories(stories, userId, successHandler, failureHandler) {
    stories = stories || [];
    var storyIds = [];
    var userIds = [];
    var storiesMap = {};
    for (var i = 0, len = stories.length; i < len; ++i) {           
        var story = stories[i];       
        userIds.push(story.UserId);
        story.sections = [{content: ''}];            
        story.numlikes = story.num_likes;
        console.log('adding ' + story.id)
        storyIds.push(story.id);    
        storiesMap[story.id] = story;
    }
        
    //Why the hell can't I do group by and min?!?
    Section.findAll({
        attributes: ['TaleId', 'id', 'content'],
        where: {
            TaleId: storyIds
        },
        order: 'TaleId, id'
    }).success(function(sections) {
        var storyId = -1;
        for (var j = 0, len = sections.length; j < len; ++j) {
            var section = sections[j];
            if (section.TaleId !== storyId) {
                storyId = section.TaleId;
                storiesMap[storyId].sections[0].content = section.content;
            }
        }
        
        if (!userId) {
            addUsersIdsToStories(userIds, stories, successHandler, failureHandler);
        } else {
            successHandler && successHandler(stories);
        }
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.getStories = function(userId, pageNumber, pageSize, sortOrder, sortDir, successHandler, failureHandler) {
    var queryParams = {
        limit: pageSize,
        order: getTaleSortOrder(sortOrder) + ' ' + sortDir,
        offset: (pageNumber - 1) * pageSize
    }
    
    if (userId) {
        getUserStories(userId, pageNumber, pageSize, sortOrder, sortDir, successHandler, failureHandler);
        return;
    }
    
    Tale.findAll(queryParams).success(function(stories) {
        processStories(stories, userId, successHandler, failureHandler);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

var addUsersIdsToStories = function(userIds, stories, successHandler, failureHandler) {
    User.findAll({where: {id: userIds}}).success(function(users) {
        var usersMap = {};
        for (var k = 0, len = users.length; k < len; ++k) {
            var user = users[k];
            usersMap[user.id] = user;
        }
        
        for (var l = 0, len = stories.length; l < len; ++l) {
            var story = stories[l];
            story.owner = usersMap[story.UserId].userId;
        }
        
        successHandler && successHandler(stories);
    }).error(function() {
        failureHandler && failureHandler();
    });
}

module.exports.createStory = function(story, user, content, successHandler, failureHandler) {
    Tale.build(story).save().success(function(savedStory) {
        savedStory.setUser(user).success(function() {
            module.exports.createSection(content, savedStory, user, successHandler, failureHandler);
            console.log('Set User ' + user.userId);
        }).error(function() {
            console.log('failed to add user to story ' + story);
            console.dir(err);
            failureHandler && failureHandler();
        })
        
    }).error(function(err) {
        console.log('failed to create story ' + story);
        console.dir(err);
        failureHandler && failureHandler();
    });
}

module.exports.createSection = function(sectionContent, story, user, successHandler, failureHandler) {
    Section.build({
        content: sectionContent
    }).save().success(function(section) {
        section.setUser(user).success(function() {        
            console.log('Added user ' + user.id + ' to section ' + section.id);
            section.setTale(story).success(function() {
                console.log('Added story ' + story.id + ' to section ' + section.id);
                successHandler && successHandler(user.userId, story.id);
            }).error(function(err) {
                console.log('failed to add story ' + story.id + ' to story section ' + section.id);
                console.dir(err);
                failureHandler && failureHandler();
            })
        }).error(function(err) {
            console.log('failed to add user ' + user.id + ' to story section ' + section.id);
            console.dir(err);
            failureHandler && failureHandler();
        })
    }).error(function(err) {
        console.log('failed to create story section ' + sectionContent + ', ' + story.id);
        console.dir(err);
        failureHandler && failureHandler();
    })
}